diff -urN work/openssh-7.6p1/rc_ssh work/openssh-7.6p1/rc_ssh
--- work/openssh-7.6p1/rc_ssh	1970-01-01 01:00:00.000000000 +0100
+++ work/openssh-7.6p1/rc_ssh	2018-01-05 12:00:11.000000000 +0100
@@ -0,0 +1,174 @@
+#!/bin/sh
+#
+# ancistrus
+#
+# Netgear's D7000 Nighthawk Router Experience Distributed Project
+#
+# https://github.com/negan07/ancistrus
+#
+# License: GPLv2
+#
+#
+# Rc script for openssh daemon sshd.
+#
+# Usage: $0 < start restart startforced restartforced stop regenkeys regenauth regenmoduli > (<debug>)
+#
+# <debug> runs sshd in foreground mode with pedantic debug messages.
+#
+
+stop() {
+    # Kill all clients...
+    for PID in `pidof sshd`
+    do
+    [ -e /proc/${PID}/stat ] && kill -9 $PID
+    done
+    rm -rf ${VARDIR} /tmp/sshd.pid ${CONFDIR}/moduli
+}
+
+start() {
+    # Checking if the service is already running...
+    [ ! -z `pidof sshd` ] && echo "sshd already running..." && exit 1
+
+    # Checking nvram dir...
+    [ ! -d ${NVRAMDIR} ] && echo "$0: Nvram error !" && exit 2
+
+    # Preliminary fs operations...
+    [ ! -d ${VARDIR} ] && mkdir -p -m 0700 ${VARDIR}
+    [ ! -f ${CONFDIR}/${CONF} ] && cp -f ${CONFETCDIR}/${CONF} ${CONFDIR}/
+    [ -f ${KEYSDIR}/moduli ] && cp -f ${KEYSDIR}/moduli ${CONFDIR}/ && chmod 600 ${CONFDIR}/moduli
+
+    # Retrocompatibility...
+    [ -d /.ssh ] && rm -rf /.ssh
+
+    # Renew auth login
+    rm -f ${CONFDIR}/nologin
+    eval `nvram get http_password` > /dev/null 2>&1
+    echo "${USR}:${http_password}" | chpasswd > /dev/null 2>&1
+
+    # Keys generation
+    genkeys
+
+    # Starting SSHD...
+    $SSHD
+
+    # Sanity check...
+    SSHD_RC=$?
+    [ $SSHD_RC -ne 0 ] && echo "$0: Error ${SSHD_RC} starting ${SSHD}..." && exit $SSHD_RC
+}
+
+genkeys() {
+    # Preliminary fs operations...
+    [ -d ${TMPKEYSDIR} ] && rm -rf ${TMPKEYSDIR}
+    [ ! -d ${KEYSDIR} ] && chown ${USR}:${USR} / ${CONFIG} ${NVRAMDIR} && chmod 0755 ${CONFIG} ${NVRAMDIR} && mkdir -p -m 0600 ${KEYSDIR}
+    # Key check & generation if missed...
+    for KTYPE in $KEYTYPES
+    do
+    KEY=${KEYSDIR}/${LABEL}.${KTYPE}
+        if [ ! -f $KEY ]; then
+        TMPKEY=${TMPKEYSDIR}/${LABEL}.${KTYPE}
+        # Creating tmp key dir
+        [ ! -d ${TMPKEYSDIR} ] && mkdir -p -m 0600 ${TMPKEYSDIR}
+        # Creating auth key file
+	${SSH_KEYGEN} -q -t ${KTYPE} -f ${TMPKEY} -N '' && chmod 600 ${TMPKEY} ${TMPKEY}.pub
+        fi
+    done
+    # Store new keys
+    [ -d ${TMPKEYSDIR} ] && mv -f ${TMPKEYSDIR}/* ${KEYSDIR} && rm -rf ${TMPKEYSDIR} && genauth
+}
+
+genauth() {
+    # Regenerate auth keys file from existents .pub
+    [ ! -d ${KEYSDIR} ] && echo "Auth key dir: '${KEYSDIR}' missed..." && exit 3
+    rm -f ${AUTHKEYS} && touch ${AUTHKEYS} && chmod 600 ${AUTHKEYS}
+    find ${KEYSDIR} -type f -name *.pub -exec cat '{}' >> ${AUTHKEYS} \;
+    sync
+    return 0
+}
+
+genmoduli() {
+    # Regenerate moduli file in low-priority-background mode as it takes long time
+    sync
+    echo 3 > /proc/sys/vm/drop_caches
+    nice -n 18 ssh-keygen -q -G /tmp/moduli.all -b 4096
+    nice -n 18 ssh-keygen -q -T /tmp/moduli.safe -f /tmp/moduli.all
+    chmod 600 /tmp/moduli.safe
+    rm -f /tmp/moduli.all
+    mv -f /tmp/moduli.safe ${KEYSDIR}/moduli
+    sync
+    [ "${ssh_enable}" = "1" ] && start
+}
+
+# Dirs
+CONFIG=/config
+NVRAMCONFIGDIR=/nvram
+NVRAMDIR=${CONFIG}/${NVRAMCONFIGDIR}
+KEYSDIR=${NVRAMDIR}/ssh
+TMPKEYSDIR=/tmp/ssh
+VARDIR=/var/ssh
+CONFDIR=/etc
+CONFETCDIR=/usr${CONFDIR}
+BINDIR=/usr/sbin
+
+# Debug purpose
+#BINDIR=/tmp/etc/ancdbg
+#NVRAMDIR=${BINDIR}
+#KEYSDIR=${BINDIR}/ssh
+
+# Names
+USR=root
+LABEL=D7000
+CONF=sshd_config
+KEYTYPES="rsa ecdsa ed25519"
+AUTHKEYSNAME=authorized_keys
+AUTHKEYS=${KEYSDIR}/${AUTHKEYSNAME}
+SSH_KEYGEN=${BINDIR}/ssh-keygen
+SSHD=${BINDIR}/sshd
+
+# Debug running
+[ "${2}" = "debug" ] && SSHD="${BINDIR}/sshd -D -ddd -e"
+
+eval `nvram get ssh_enable` > /dev/null 2>&1
+
+case $1 in
+start|restart)
+stop
+[ "${ssh_enable}" = "1" ] && start
+;;
+startforced|restartforced)
+stop
+start
+;;
+stop)
+stop
+;;
+regenkeys)
+stop
+rm -f ${KEYSDIR}/${LABEL}.* ${AUTHKEYS}
+sync
+genkeys
+[ "${ssh_enable}" = "1" ] && start
+;;
+regenauth)
+stop
+genauth
+[ "${ssh_enable}" = "1" ] && start
+;;
+regenmoduli)
+cat << _EOF_
+'moduli' generation will take a very long time to finish with about 50% of cpu load.
+Better to execute it while router is in an average low traffic state & usage.
+
+In alternative, consider the possibility of generating it from an external host machine
+and then upload it on ${KEYSDIR} .
+
+Ssh server will be closed in the meanwhile.
+Running in the background: this console session can exit.
+_EOF_
+sleep 15
+stop
+genmoduli &
+;;
+*)
+echo "Usage: $0 < start restart startforced restartforced stop regenkeys regenauth regenmoduli > (<debug>)"
+;;
+esac
