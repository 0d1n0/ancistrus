#!/bin/sh
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#       Copyright (C) 2012-4 Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#
# Revised & adapted:
#
# ancistrus
#
# Netgear's Nighthawk Router Experience Distributed Project
#
# D7000
#
# https://github.com/negan07/ancistrus
#
# License: GPLv2
#
#
# Startup rc for qos-sqm-scripts
#
# Usage: $0 < start restart stop show stats version > (< debug_mode >) (< verbose_mode >)
#

path_binaries() {
# Paths & binaries
[ -z "$LIBDIR" ] && LIBDIR=/lib
[ -z "$ETCDIR" ] && ETCDIR=/usr/etc
[ -z "$BINDIR" ] && BINDIR=/usr/sbin
[ -z "$SCRIPTSDIR" ] && SCRIPTSDIR=${BINDIR}/scripts

# Debug purpose
#LIBDIR=/tmp/etc/ancdbg
#ETCDIR=/tmp/etc/ancdbg
#BINDIR=/tmp/etc/ancdbg
#SCRIPTSDIR=/tmp/etc/ancdbg

[ -z "$INSMOD" ] && INSMOD=insmod
[ -z "$RMMOD" ] && RMMOD=rmmod
[ -z "$TC" ] && TC=tc_wrapper
[ -z "$IP" ] && IP=ip_wrapper
[ -z "$TC_BINARY" ] && TC_BINARY=${BINDIR}/tc
[ -z "$IP_BINARY" ] && IP_BINARY=${BINDIR}/ip
[ -z "$STATE_FILE" ] && STATE_FILE=/tmp/qos.state
[ "$SQM_DEBUG" = "1" ] && QOS_LOG=/tmp/qosdebug.log
}

get_settings() {
# CONF
. ${ETCDIR}/qos-sqm.conf

# NVRAM
eval `${BINDIR}/anc nvram get ${VAR}`
set -- ${VAR}
for SET in $SQM_VARS
do
VAL=$(eval echo '$'${1})
eval "$SET=$VAL"
shift
done

# DEFAULTS
set -- ${DEF}
for SET in $SQM_VARS
do
VAL=$(eval echo '$'${SET})
	if [ -z "$VAL" ]; then
	VAL=${1}
	[ "${VAL}" = "void" ] && VAL=""
	eval "$SET=$VAL"
	fi
shift
done

# These are the modules that do_modules() will attempt to load
#ALL_MODULES="act_ipt sch_$QDISC sch_ingress act_mirred cls_fw cls_flow cls_u32 sch_htb sch_hfsc"
[ -z "$ALL_MODULES" ] && ALL_MODULES="act_ipt sch_$QDISC cls_flow"

[ "$SQM_DEBUG" = "1" ] && echo UPLINK=$UPLINK DOWNLINK=$DOWNLINK SCRIPT=$SCRIPT IFACE=$IFACE QDISC=$QDISC IP6MODE=$IP6MODE LLAM=$LLAM LINKLAYER=$LINKLAYER OVERHEAD=$OVERHEAD STAB_MTU=$STAB_MTU STAB_MPU=$STAB_MPU STAB_TSIZE=$STAB_TSIZE AUTOFLOW=$AUTOFLOW LIMIT=$LIMIT ILIMIT=$ILIMIT ELIMIT=$ELIMIT ITARGET=$ITARGET ETARGET=$ETARGET IECN=$IECN EECN=$EECN ZERO_DSCP_INGRESS=$ZERO_DSCP_INGRESS IGNORE_DSCP_INGRESS=$IGNORE_DSCP_INGRESS IQDISC_OPTS=$IQDISC_OPTS EQDISC_OPTS=$EQDISC_OPTS TARGET=$TARGET IPT_MASK=$IPT_MASK SHAPER_BURST=$SHAPER_BURST HTB_QUANTUM_FUNCTION=$HTB_QUANTUM_FUNCTION ALL_MODULES=$ALL_MODULES
}

logging_setup() {
# Logging verbosity
VERBOSITY_SILENT=0
VERBOSITY_ERROR=1
VERBOSITY_WARNING=2
VERBOSITY_INFO=5
VERBOSITY_DEBUG=8
VERBOSITY_TRACE=10
[ -z "$SQM_VERBOSITY_MAX" ] && SQM_VERBOSITY_MAX=$VERBOSITY_INFO
# For silencing only errors
[ -z "$SQM_VERBOSITY_MIN" ] && SQM_VERBOSITY_MIN=$VERBOSITY_SILENT

[ -z "$SQM_DEBUG" ] && SQM_DEBUG=0
if [ "$SQM_DEBUG" -eq "1" ]
then
    SQM_DEBUG_LOG=${QOS_LOG}
    OUTPUT_TARGET=${SQM_DEBUG_LOG}
else
    OUTPUT_TARGET="/dev/null"
fi
}

stop_sqm() {

if [ -z "${SCRIPT}" ] ; then
    sqm_error "SCRIPT value not defined."
    sqm_error "Please check your configuration and try again."
    exit 1
fi

sqm_trace; sqm_trace "$(date): Stopping." # Add some space and a date stamp to verbose log output and log files to separate runs
sqm_log "Stopping SQM on ${IFACE}"

# make sure to only delete the ifb associated with the current interface
CUR_IFB=$( get_ifb_associated_with_if ${IFACE} )
[ -z "$CUR_IFB" ] && CUR_IFB=$( ifb_name ${IFACE} )

if [ ! -f "${SCRIPTSDIR}/${SCRIPT}" ]; then
    sqm_error "SQM script ${SCRIPT} not found!"
    exit 1
fi

. ${SCRIPTSDIR}/${SCRIPT}

sqm_stop

rm -f "${STATE_FILE}"

sleep 5

return 0
}

start_sqm() {

if [ -z "${SCRIPT}" ] ; then
    sqm_error "SCRIPT value not defined."
    sqm_error "Please check your configuration and try again."
    exit 1
fi

if [ -f "${STATE_FILE}" ]; then
    sqm_error "SQM already activated on ${IFACE}."
    exit 1
fi

# in case of spurious hotplug events, try double check whether the interface is really up
if [ ! -d /sys/class/net/${IFACE} ] ; then
    sqm_error "${IFACE} does currently not exist, not even trying to start SQM on nothing."
    exit 1
fi

if [ ! -f "${SCRIPTSDIR}/${SCRIPT}" ]; then
    sqm_error "SQM script ${SCRIPT} not found!"
    exit 1
fi

. ${SCRIPTSDIR}/${SCRIPT}

sqm_trace; sqm_trace "$(date): Starting." # Add some space and a date stamp to verbose log output and log files to separate runs
sqm_log "Starting SQM script: ${SCRIPT} on ${IFACE}, in: ${DOWNLINK} Kbps, out: ${UPLINK} Kbps"
sqm_start && write_state_file ${STATE_FILE} && sqm_log "${SCRIPT} was started on ${IFACE} successfully"

return 0
}

show_sqm() {
local INGR=$( ifb_name ${IFACE} )
local INGRLNK=`$IP_BINARY link | grep ${INGR}`
[ -z "$1" ] || S="-s"

    for I in qdisc class filter
    do
    echo
    echo "---- $I ----"
        [ "${UPLINK}" -eq 0 ] || {
        echo "--- EGRESS ---"
        $TC_BINARY $S $I show dev ${IFACE}
	}
        [ "${DOWNLINK}" -eq 0 ] || [ -z "${INGRLNK}" ] || {
        echo "--- INGRESS ---"
        $TC_BINARY $S $I show dev ${INGR}
        }
    done
echo
echo "--- MANGLE ---"
iptables -t mangle -nL -v
[ "$IP6MODE" != "disable" ] && ip6tables -t mangle -nL -v

return 0
}

# DEBUG
[ "$2" = "debug" ] && SQM_DEBUG=1
[ "$3" = "verbose" ] && SQM_VERBOSITY_MAX=8

# PATH
path_binaries

# SETTINGS
get_settings

# LOG
logging_setup

# SQM FUNCTIONS
. ${SCRIPTSDIR}/functions.qos

    case $1 in
    start|restart)
    stop_sqm
    start_sqm
    ;;
    stop)
    stop_sqm
    ;;
    show)
    show_sqm
    ;;
    stats)
    show_sqm stats
    ;;
    -v|-V|--version|version)
cat << _EOF_
################################################################################
# (Cero3 Shaper)
#   Copyright (C) 2012-6
#       Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#       Eric Luehrsen
#
################################################################################
#
# Revised & adapted:
#
# ancistrus
#
# Netgear's Nighthawk Router Experience Distributed Project
#
# D7000
#
# https://github.com/negan07/ancistrus
#
# License: GPLv2
#
#
# qos-sqm - version: 0.1.0
_EOF_
    ;;
    *)
    echo "Usage: $0 < start restart stop show stats version > (< debug >) (< verbose >)" && exit 1
    ;;
    esac

